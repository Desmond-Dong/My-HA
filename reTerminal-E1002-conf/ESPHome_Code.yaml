esphome:
  name: e1002
  friendly_name: E1002
  on_boot:
    priority: 600
    then:
      - delay: 20s
      - component.update: dashboard_image
 #     - output.turn_on: bsp_sd_enable
      - output.turn_on: bsp_battery_enable
      - delay: 200ms
      - component.update: battery_voltage
      - component.update: battery_level

esp32:
  board: esp32-s3-devkitc-1
  framework:
    #type: arduino
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "your key"
  services:
    - service: play_song
      variables:
        song_data: string
      then:
        - lambda: |-
            auto *bz = id(buzzer_pwm);
            std::string s = song_data;
            size_t start = 0;

            while (true) {
              size_t comma = s.find(',', start);
              std::string note = s.substr(start, comma - start);
              if (note.empty()) break;

              size_t colon = note.find(':');
              if (colon != std::string::npos) {
                int freq = atoi(note.substr(0, colon).c_str());
                int dur  = atoi(note.substr(colon + 1).c_str());

                if (freq > 0) {
                  // ✅ 正确写法
                  bz->update_frequency(freq);
                  bz->set_level(0.6);
                } else {
                  bz->set_level(0);
                }
                delay(dur);
              }

              if (comma == std::string::npos) break;
              start = comma + 1;
            }

            bz->set_level(0);

# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: "your ota password"
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

psram:
  mode: octal
  speed: 80MHz
#web_server:
#  version: 3
captive_portal:

# External component for waveshare epaper
#external_components:
#  - source: github://lublak/esphome@pull/1/head
#    components: [ waveshare_epaper ]

esp32_ble_tracker:
  scan_parameters:
    # We currently use the defaults to ensure Bluetooth
    # can co-exist with WiFi In the future we may be able to
    # enable the built-in coexistence logic in ESP-IDF
    active: true

bluetooth_proxy:
  active: true

# Deep-sleep, wake by GPIO4
#deep_sleep:
#  id: deep_sleep_1
#  run_duration: 1min
#  sleep_duration: 10min
#  wakeup_pin: GPIO4          # Right white button
#  wakeup_pin_mode: INVERT_WAKEUP

# SPI / I²C
spi:
  clk_pin: GPIO7
  mosi_pin: GPIO9
i2c:
  scl: GPIO20
  sda: GPIO19
light:
#  - platform: binary
#    name: "Onboard LED"
#    output: bsp_led
#    id: onboard_led
  - platform: monochromatic
    icon: "mdi:volume-high"
    output: buzzer_pwm
    name: "Buzzer"
    id: buzzer
    # Setting transition length to 0s makes the buzzer turn on and off instantly.
    default_transition_length: 0s
switch:
  - platform: template
    name: "Refresh"
    id: refresh_display
    turn_on_action:
      - component.update: dashboard_image
      - delay: 200ms                   # 等待下载触发
      - switch.turn_off: refresh_display
#  - platform: template
#    name: "Force Deep Sleep"
#    turn_on_action:
#      - logger.log:
#          format: "进入休眠 %d 分钟"
#          args: [ 'id(sleep_minutes)' ]
#      - deep_sleep.enter:
#          id: deep_sleep_1
#          sleep_duration: !lambda 'return (id(sleep_minutes) * 60000);'
sensor:
  - platform: sht4x
    temperature:
      name: "Temperature"
      id: temp_sensor
    humidity:
      name: "Humidity"
      id: hum_sensor
  - platform: wifi_signal
    name: "Wi-Fi Signal"
    id: wifi_signal1
    update_interval: 60s
  - platform: adc
    pin: GPIO1
    name: "Battery Voltage"
    id: battery_voltage
    update_interval: 60s
    attenuation: 12db
    filters:
      - multiply: 2.0
  - platform: template
    name: "Battery Level"
    id: battery_level
    unit_of_measurement: "%"
    icon: "mdi:battery"
    device_class: battery
    state_class: measurement
    lambda: 'return id(battery_voltage).state;'
    update_interval: 60s
    filters:
      - calibrate_linear:
          - 4.15 -> 100.0
          - 3.96 -> 90.0
          - 3.91 -> 80.0
          - 3.85 -> 70.0
          - 3.80 -> 60.0
          - 3.75 -> 50.0
          - 3.68 -> 40.0
          - 3.58 -> 30.0
          - 3.49 -> 20.0
          - 3.41 -> 10.0
          - 3.30 -> 5.0
          - 3.27 -> 0.0
      - clamp:
          min_value: 0
          max_value: 100
output:
#  - platform: gpio
#    pin: GPIO6
#    id: bsp_led
#    inverted: true
#  - platform: gpio
#    pin: GPIO16
#    id: bsp_sd_enable
  - platform: gpio
    pin: GPIO21
    id: bsp_battery_enable
  - platform: ledc   # CORRECTED: 'ledc' is the correct platform for ESP32 PWM.
    pin: GPIO45
    id: buzzer_pwm
    # The frequency determines the pitch of the buzzer's sound. 1000Hz is a mid-range tone.
    frequency: 1000Hz

          
binary_sensor:
  - platform: gpio    # Next page
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    id: key1
    name: "Key1"
  - platform: gpio     # Prev page
    pin:
      number: GPIO4
      mode: INPUT_PULLUP
      inverted: true
    id: key2
    name: "Key2"
  - platform: gpio     # Prev page
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true
    id: key3
    name: "Key3"
    on_press:
      - component.update: dashboard_image

  # - platform: gpio
  #   pin:
  #     number: GPIO4
  #     mode: INPUT_PULLUP
  #     inverted: true
  #   id: key2
  #   name: "Key2"
  #   on_press:
  #     then:
  #       - lambda: |-
  #           id(page_index) = (id(page_index) - 1 + 3) % 3;
  #           id(epaper_display).update();

# Home Assistant time
#time:
#  - platform: homeassistant
#    id: ha_time
#globals:
#  - id: sleep_minutes
#    type: int
#    restore_value: no
#    initial_value: '0'

##number:
 # - platform: template
#    name: "Sleep Minutes"
#    id: sleep_minutes_number
#    optimistic: true
#    min_value: 1
#    max_value: 360
#    step: 1
#    set_action:
#      - lambda: |-
#          id(sleep_minutes) = (int)x;




#deep_sleep:
#  id: deep_sleep_1

http_request:
  verify_ssl: false
  timeout: 20s
  watchdog_timeout: 25s

time:
  - platform: sntp
    id: sntp_time
    timezone: Asia/Shanghai
    on_time:
      # 每个整点触发
      - seconds: 0
        minutes: 0
        then:
          - if:
              condition:
                # 判断小时数不是 1~6
                lambda: |-
                  auto now = id(sntp_time).now();
                  return !(now.hour >= 1 && now.hour < 6);
              then:
                # 仅非 1~6 点执行更新
                - component.update: dashboard_image
# 在线图片获取
online_image:
  - id: dashboard_image
    format: PNG
    type: RGB565
    buffer_size: 65536
    url: http://YOUR_IP:10000/lovelace/2?viewport=800x480&format=png&lang=zh-cn
    on_download_finished:
      - component.update: epaper_display

# 墨水屏显示
display:
  - platform: epaper_spi
    id: epaper_display
    model: 7.3in-spectra-e6
    cs_pin: GPIO10
    dc_pin: GPIO11
    reset_pin:
      number: GPIO12
      inverted: false
    busy_pin:
      number: GPIO13
      inverted: true
    update_interval: never   # 不自动刷新，靠 on_time 来触发
    lambda: |-
      it.image(0, 0, id(dashboard_image));
